(defwidget bar [screen]
  (centerbox :orientation "v"
    :class "ewwbar"
    (box :class "left"
      :halign "start"
      :width 46
      :valign "start"
      (left :screen screen))
    (box :class "center"
      :width 46
      :halign "start"
      :valign "center"
      (middle :screen screen))
    (box :class "right"
      :valign "end"
      (right :screen screen))
  )
)

(defwidget left [screen]
  (power)
)

(defwidget middle []
  (time)
)

(defwidget time []
  (box :orientation "v"
       :class "time"
    hour minute second))

(defpoll hour :interval "1s" "date +%H")
(defpoll minute :interval "1s" "date +%M")
(defpoll second :interval "1s" "date +%S")

(defwidget power []
  (eventbox
    :onhover "eww update show_power=true"
    :onhoverlost "eww update show_power=false"

    (box
      :orientation "v"
      :space-evenly false
      :spacing 2
      :class "power"
      (poweroff)
      (revealer
        :transition "slidedown"
        :reveal show_power
        :duration "550ms"
        (box
          :orientation "v"
          :space-evenly false
          :spacing 2
          (windows)
          (reboot)
          )
        )
      )
    )
  )

(defvar show_power false)

(defwidget poweroff []
  (button :class "poweroff" :onclick "poweroff" "")
)

(defwidget windows []
  (button :class "windows" :onclick "sudo efibootmgr --bootnext 0000 && reboot" "")
)

(defwidget reboot []
  (button :class "reboot" :onclick "reboot" "")
)

(defwidget right [screen]
  (box
    :orientation "v"
    :space-evenly false
    :spacing 12

    (box
      :orientation "v"
      :space-evenly false
      :spacing 2
      :hexpand true
      :halign "start"
      :width 46

      (revealer
        :transition "slideup"
        :duration "300ms"
        :reveal EWW_BATTERY["BAT0"]
  
        (label :class "battery ${EWW_BATTERY["BAT0"].status}" :text "${EWW_BATTERY["BAT0"].capacity}")
      )

      (revealer
        :transition "slideup"
        :duration "300ms"
        :reveal iphone_battery

        (label :class "iphone ${iphone_battery.connected ? "connected" : "disconnected"}" :text "${iphone_battery["percentage"]}")
      )
      (label :class volume-class :text volume)
      {{#if secondary_sink}}
      (label :class volume-speakers-class :text volume-speakers)
      {{/if}}
    )

    (eventbox
      :onhover "eww update show_color=true && eww update show_color2=true"
      :onhoverlost "eww update show_color=false && eww update show_color2=false"

      (box
        :orientation "v" 
        :space-evenly false
        :spacing 12
        
        (label :class "color_label" :text "" :style "color: ${led_color}")
        (led_color)
      )
    )
  )
)

(deflisten volume-class :initial "volume" "./audio.sh muted")
(deflisten volume-speakers-class :initial "volume" "./audio.sh speaker-muted")
(deflisten volume :initial "0" "./audio.sh volume")
(deflisten volume-speakers :initial "0" "./audio.sh volume-speakers")

(deflisten iphone_battery :initial "{\"percentage\": \"\", \"connected\": false}" "./iphone.sh")

(defwindow bar
  :stacking "fg"
  :monitor 0
  :exclusive true
  :windowtype "dock"
  :wm-ignore false
  :geometry (geometry :x 14 :y 14 :width "46px" :height "${ {{main_height}} - 28 }px")
  :anchor "top left"
  (bar :screen 0)
)

(defvar show_color false)
(defvar show_color2 false)

(defwidget led_color []
  (revealer
    :transition "slideup"
    :reveal show_color
    :duration "550ms"
    (revealer :transition "slideright"
      :reveal show_color2
      :duration "550ms"

      (color-chooser :timeout "1000ms" :class "color_button" :use-alpha false :onchange "hass-color \" {0} \" && eww update led_color=\" {0} \"")
    )
  )
)

(defvar led_color "white")
